{"version":3,"sources":["Components/CreationForm.js","Components/Sentence.js","Screens/CreateScreen.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CreationForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mainSelected","react_default","a","createElement","onChange","mainChanged","bind","value","event","setState","target","Component","Sentence","condition","action","_this2","conditionComponents","map","item","textFor","style","fontWeight","key","onClick","onGapClicked","display","backgroundColor","border","cursor","CreateScreen","formShown","Components_Sentence","onGapCliked","Components_CreationForm","App","className","Screens_CreateScreen","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOA6BeA,qBA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,aAAc,MAJHR,wEAQf,OACIS,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,SAAUT,KAAKU,YAAYC,KAAKX,OACpCM,EAAAC,EAAAC,cAAA,UAAQI,MAAM,mBAAd,mBACAN,EAAAC,EAAAC,cAAA,UAAQI,MAAM,cAAd,oDAMJC,GACRb,KAAKc,SAAS,CACVT,aAAcQ,EAAME,OAAOH,eArBZI,cC6BZC,cA5BX,SAAAA,EAAYrB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACfpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,KAAMJ,KACDQ,MAAQ,CACTc,UAAW,CAAC,QACZC,OAAQ,IAJGtB,wEAOV,IAAAuB,EAAApB,KACCqB,EAAsBrB,KAAKI,MAAMc,UAAUI,IAAI,SAAAC,GAAI,OACrDH,EAAKI,QAAQD,KAGjB,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMiB,MAAO,CAACC,WAAY,SAA1B,SACCL,EACDf,EAAAC,EAAAC,cAAA,QAAMiB,MAAO,CAACC,WAAY,SAA1B,yCAKJH,GACJ,MAAY,SAATA,EACSjB,EAAAC,EAAAC,cAAA,QAAMmB,IAAKJ,GAAOA,EAAlB,KACLjB,EAAAC,EAAAC,cAAA,OAAKoB,QAAS5B,KAAKJ,MAAMiC,aAAcJ,MAAO,CAACK,QAAS,SAAUC,gBAAiB,OAAQC,OAAQ,iBAAkBC,OAAQ,WAAYN,IAAI,OAA7I,kBAzBQX,aCyBRkB,cAtBX,SAAAA,EAAYtC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACfrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMJ,KAEDQ,MAAQ,CACT+B,WAAW,GAJAtC,wEASf,OACIS,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4B,EAAD,CAAUP,aAAc7B,KAAKqC,cAC7B/B,EAAAC,EAAAC,cAAC8B,EAAD,sDAbWtB,aC+BZuB,mLA5BX,OACEjC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,aACblC,EAAAC,EAAAC,cAACiC,EAAD,2CAKJ,OACEnC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,UAAQgC,UAAU,cAChBlC,EAAAC,EAAAC,cAAA,OAAKkC,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzCtC,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEgC,UAAU,WACVK,KAAK,sBACL9B,OAAO,SACP+B,IAAI,uBAJN,wBAhBQ9B,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.53641cae.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CreationForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            mainSelected: null\n        };\n    }\n    render() {\n        return (\n            <div>\n                <select onChange={this.mainChanged.bind(this)}>\n                    <option value=\"zahlungseingang\">Zahlungseingang</option>\n                    <option value=\"kontostand\">Kontostand</option>\n                </select>\n            </div>\n        );\n    }\n\n    mainChanged(event) {\n        this.setState({\n            mainSelected: event.target.value\n        });        \n    }\n\n}\n\nexport default CreationForm;","import React, { Component } from 'react';\n\nclass Sentence extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            condition: [\"NULL\"],\n            action: []\n        };\n    }\n    render() {\n        const conditionComponents = this.state.condition.map(item => \n            this.textFor(item)\n        );\n        \n        return (\n            <div>\n                <span style={{fontWeight: 'bold'}}>Wenn </span>\n                {conditionComponents}\n                <span style={{fontWeight: 'bold'}}>Dann</span>\n            </div>\n        )\n    }\n\n    textFor(item) {\n        if(item !== \"NULL\")\n            return (<span key={item}>{item} </span>);\n        return <pre onClick={this.props.onGapClicked} style={{display: 'inline', backgroundColor: '#aaa', border: '2px solid #333', cursor: 'pointer'}} key=\"gap\">       </pre>;\n    }\n}\n\nexport default Sentence;","import React, { Component } from 'react';\nimport CreationForm from '../Components/CreationForm.js';\nimport Sentence from '../Components/Sentence.js';\n\nclass CreateScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            formShown: true\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <Sentence onGapClicked={this.onGapCliked}/>\n                <CreationForm />\n            </div>\n        );\n    }\n\n    onGapClicked() {\n        \n    }\n}\n\nexport default CreateScreen;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CreateScreen from './Screens/CreateScreen';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <CreateScreen />\n      </div>\n    )\n  }\n  renderOld() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}